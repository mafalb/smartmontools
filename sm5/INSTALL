$Id: INSTALL,v 1.14 2003/10/02 10:07:44 ballen4705 Exp $

Any recent Linux distribution should support this package.  Note that
smartmontools requires Linux kernel 2.2.14 or greater in order to run at
all.  But to give the ATA RETURN SMART STATUS command, the kernel needs
to support the HDIO_DRIVE_TASK ioctl().  Any 2.4 series kernel should
provide this support.  I'm told that some of the 2.2.20 and later
kernels also provide this support if they're properly patched /
configured.

To install from sources, use the commands:

./autogen.sh

The above command is only required when installing from CVS. You need
GNU Autoconf, GNU Automake, and their dependencies installed in order to
run it.

./configure

With no options, as shown, this defaults to --prefix=/usr --sysconfdir=/etc
--mandir=/usr/share/man --with-docdir=/usr/share/doc/smartmontools-${VERSION},
which are correct for Red Hat, Slackware, and probably other Linux
distributions.


Red Hat (default)
-----------------
./configure
OR
./configure --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --mandir=/usr/share/man  --with-initscriptdir=/etc/rc.d/init.d --with-docdir=/usr/share/doc/smartmontools-${VERSION}

File System Hierarchy Standard (FHS), FreeBSD
---------------------------------------------
./configure --sbindir=/usr/local/sbin --sysconfdir=/usr/local/etc --datadir=/usr/local/share --mandir=/usr/local/man  --with-initscriptdir=/usr/local/etc/rc.d/init.d

Slackware
---------
./configure
OR
./configure --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --mandir=/usr/share/man

A Slackware init script (we'll call it rc.smartd) is completely
different, goes in /etc/rc.d, and is usually called from /etc/rc.d/rc.M
with something like:

if [ -x /etc/rc.d/rc.smartd ]; then
  . /etc/rc.d/rc.smartd
fi

It'd be disabled by default with chmod 644 and could be as simple as:

#!/bin/sh
if [ -x /usr/sbin/smartd ]; then
 /usr/sbin/smartd
fi

His contents could also be added directly in /etc/rc.d/rc.M or
/etc/rc.d/rc.local.

SuSE
----
./configure [PLEASE ADD]

Debian
------
./configure --prefix=/usr/local


Others Distributions or Operating Systems [PLEASE ADD]
------------------------------------------------------

make
make install (only root can do this)

To compile from another directory, you can replace ./configure by the
following:

mkdir objdir
cd objdir
../configure

And to install to another destination, used mainly by package
maintainers, or if you want to examine the package contents without
risk of modifying any system files:

make prefix=/home/myself/smartmontools-package install

Use a full PATH. ~/smartmontools-package may not work.

After installing it, you can read the man pages, and try out the
commands:
   
man smartd.conf
man smartctl
man smartd

/usr/sbin/smartctl -s on -o on -S on /dev/hda (only root can do this)
/usr/sbin/smartctl -a /dev/hda (only root can do this)

Note that the default location for the manual pages are
/usr/share/man/man5 and /usr/share/man/man8.  If "man" doesn't find
them, you may need to add /usr/share/man to your MANPATH environment
variable.

Source and binary RPM packages are available at
http://sourceforge.net/project/showfiles.php?group_id=64297

Refer to http://smartmontools.sourceforge.net/index.html#howtodownload
for any additional installation instructions.

The following files are installed:
/usr/sbin/smartctl				[Executable command-line utility]
/usr/sbin/smartd				[Executable daemon]
/etc/rc.d/init.d/smartd				[Init/Startup script for smartd]
/usr/share/man/man5/smartd.conf.5		[Manual page]
/usr/share/man/man8/smartctl.8			[Manual page]
/usr/share/man/man8/smartd.8			[Manual page]
/usr/share/doc/smartmontools-5.1/AUTHORS	[Information about the authors and developers]
/usr/share/doc/smartmontools-5.1/COPYING	[GNU General Public License Version 2]
/usr/share/doc/smartmontools-5.1/INSTALL	[What you're reading!]
/usr/share/doc/smartmontools-5.1/NEWS		[A log of changes. Also see CVS]
/usr/share/doc/smartmontools-5.1/README		[Overview]
/usr/share/doc/smartmontools-5.1/TODO		[Things that need to be done/fixed]
/usr/share/doc/smartmontools-5.1/VERSION	[Version number]
/usr/share/doc/smartmontools-5.1/WARNINGS	[Systems where lockups or other serious problems reported]
/usr/share/doc/smartmontools-5.1/smartd.conf	[Example configuration file for smartd]
/usr/share/doc/smartmontools-5.1/examplescripts	[Executable scripts for -M exec of smartd.conf (4 files)]



DETAILED DESCRIPTION OF ARGUMENTS TO CONFIGURE COMMAND
======================================================

When you type:
./configure [options]
there are five particularly important variables that affect where the
smartmontools software is installed.  The variables are listed here,
with their default values in square brackets, and the quantities that
they affect described following that.

OPTIONS        DEFAULT             AFFECTS
-------        -------             -------
--sbindir      [/usr/sbin]         directory for smartd/smartctl executables;
                                   contents of smartd/smartctl man pages
--sysconfdir   [/etc]              directory for smartd.conf;
                                   contents of smartd executable;
                                   contents of smartd/smartd.conf man pages;
                                   directory for rc.d/init.d/smartd init script
--datadir      [/usr/share]        directory for doc/ directory; 
                                   contents of smartd/smartd.conf man pages
--mandir       [/usr/share/man]    directory for smartctl/smartd/smartd.conf man pages
--prefix       [no default value]  See below, please
--with-initscriptdir=dir           Location of init scripts
               [${sysconfdir}/init.d/rc.d]  
--with-docdir=dir		   Location of the documentation
               [${prefix}/share/doc/smartmontools-${VERSION}]		

If you set --prefix and NONE of the other four variables, for example:
./configure --prefix=/home/joe
then the DEFAULT paths will ALL have prefix appended to them. For
example, if you set --prefix=/home/joe and none of the other four
variables then the different directories that are used will be:
--sbindir      [/home/joe/usr/sbin]
--sysconfdir   [/home/joe/etc]
--datadir      [/home/joe/usr/share]
--mandir       [/home/joe/usr/man]
This is useful for test installs in a harmless subdirectory somewhere.

Here are the four possible cases for the four variables above:

Case 1:
--prefix not set
--variable not set
===> VARIABLE gets default value above

Case 2:
--prefix set
--variable not set
===> VARIABLE gets PREFIX/ prepended to default value above

Case 3:
--prefix not set
--variable set
===> VARIABLE gets value that is set

Case 4:
--prefix is set
--variable is set
===> PREFIX is IGNORED, VARIABLE gets value that is set


For Filesystem Hierarchy Standard (FHS) installation locations
described in http://www.pathname.com/fhs/ please use:
--prefix=/usr/local


Follows the standard INSTALL file from GNU Automake.


Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software
Foundation, Inc.

   This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

