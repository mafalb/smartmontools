<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" >

<!--
This is DocBook XML that can be rendered into a single HTML page with a
command like 'xmlto html-nochunks <this_file_name>'. It can
also be rendered into multi-page HTML (drop the "-nochunks") or pdf,
ps, txt, etc.
-->

<article id="index">
 <articleinfo>
   <title>Smartmontools for SCSI devices</title>
   <author>
    <firstname>Douglas</firstname>
    <surname>Gilbert</surname>
    <affiliation>
     <address>
      <email>dgilbert at interlog dot com</email>
     </address>
    </affiliation>
   </author>
  <authorinitials>dpg</authorinitials>
  <pubdate>2004-09-24</pubdate>

  <revhistory>
     <revision>
       <revnumber>1.3</revnumber>
       <date>2004-09-24</date>
       <authorinitials>dpg</authorinitials>
       <revremark>
             error counter descriptions, error events log page
       </revremark>
     </revision>
     <revision>
       <revnumber>1.2</revnumber>
       <date>2004-05-27</date>
       <authorinitials>dpg</authorinitials>
       <revremark>
             reorganise, details in appendix, version 5.31
       </revremark>
     </revision>
     <revision>
       <revnumber>1.1</revnumber>
       <date>2003-10-13</date>
       <authorinitials>dpg</authorinitials>
       <revremark>
             freebsd, timestamp
       </revremark>
     </revision>
     <revision>
       <revnumber>1.0</revnumber>
       <date>2003-05-26</date>
       <authorinitials>dpg</authorinitials>
       <revremark>
             first cut
       </revremark>
     </revision>
  </revhistory>

  <copyright>
   <year>2003</year>
   <year>2004</year>
   <holder>Douglas Gilbert</holder>
  </copyright>

  <legalnotice>
   <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with
      no Back-Cover Texts.
   </para>
   <para>
    For an online copy of the license see
    <ulink url="http://www.fsf.org/copyleft/fdl.html">
    <literal>www.fsf.org/copyleft/fdl.html</literal></ulink>.
   </para>

  </legalnotice>

  <abstract>
  <para>
    This article describes how smartmontools interacts with SCSI 
    storage devices (including tapes). Smartmontools is a SMART
    utility toolset. <acronym>SMART</acronym> is an acronym for
    Self-Monitoring, Analysis and Reporting Technology. Smartmontools
    is available for the these operating systems: Linux, FreeBSD, NetBSD,
    Solaris and Windows.
  </para>
  </abstract>
 </articleinfo>

<!--
<toc></toc>
-->

  <sect1 id="intro">
      <title>Introduction</title>
<para>
Smartmontools controls and monitors storage devices using the
Self-Monitoring, Analysis and Reporting Technology 
(<acronym>SMART</acronym>) system. This toolset was originally built
for Linux and has been ported to FreeBSD, NetBSD, Solaris and
Windows. 
This article describes how smartmontools interacts with SCSI devices.
Passing reference is also made to devices that use the SCSI command
set such as USB mass storage devices and IEEE1394 devices that use
the "sbp2" protocol.
</para>
<para>
The primary web site for smartmontools is at
<ulink url="http://smartmontools.sourceforge.net">
<literal>smartmontools.sourceforge.net</literal></ulink> from which the
latest versions (both source and binaries) can be obtained. Smartmontools
grew out of the now dormant <emphasis>smartsuite</emphasis> project which
is still available on its sourceforge site. The smartmontools main page
concentrates on ATA devices.
This article supplies some SCSI specific information for
those users of smartmontools that wish to monitor SCSI storage devices.
</para>
<para>
This document outlines the features found in smartmontools
version 5.34 that are relevant to SCSI disks and tape drives.
This document was last altered on 24th September 2004.
</para>
</sect1>

<sect1 id="overv">
      <title>Overview of Smartmontools</title>
<para>
Smartmontools is made up of two executable programs, a configuration file
and online documentation (on Unix systems in the form of "man" pages).
The two executable programs are:
<itemizedlist>
<listitem><para><command>smartctl</command>: a command line utility
</para></listitem>
<listitem><para><command>smartd</command>: a daemon program providing a
monitoring service
</para></listitem>
</itemizedlist>
</para>
<para>
SCSI disks and tape drives allow self tests of their media, often monitor
the temperature of the device, maintain error counters and report when
various failure prediction thresholds are exceeded. To view the information
available try a command like: <command>smartctl -a /dev/sda</command>. If
<acronym>SMART</acronym> reporting has not been turned on for this disk 
then use this command
first: <command>smartctl -s on /dev/sda</command>. [For operating systems
other than Linux replace <filename>/dev/sda</filename> with a SCSI disk 
device name.]
</para>
<para>
The <command>smartd</command> daemon program is a service typically started
when a machine boots up. In can monitor multiple disks (both ATA and SCSI).
In Unix systems its configuration file can
be found <filename>/etc/smartd.conf</filename>. It sends alerts to the
system logs and can be configured to email system administrators when
pending failures are reported.
</para>
</sect1>

<sect1 id="oses">
      <title>Operating Systems</title>
<para>
Smartmontools was originally written for Linux. Since then it has been
ported to various other Unix based system and Windows. The names of
SCSI disk and tape devices vary. Here is a summary:

<table frame="all"><title>SCSI device names in various systems</title>
<tgroup cols="4" align="left" colsep="1" rowsep="1">
<thead>
<row>
<entry/>
<entry>disks</entry>
<entry>tapes</entry>
<entry>Notes</entry>
</row>
</thead>
<tbody>
<row>
<entry><command>Linux</command></entry>
<entry><filename>/dev/sd[a-z]</filename></entry>
<entry><filename>/dev/[n]st[0-9]</filename></entry>
</row>
<row>
<entry><command>FreeBSD</command></entry>
<entry><filename>/dev/da[0-9]</filename></entry>
<entry><filename>/dev/[n|e]sa[0-9]</filename></entry>
</row>
<row>
<entry><command>NetBSD</command></entry>
<entry><filename>/dev/sd[0-9]</filename></entry>
<entry><filename>/dev/enrst[0-9]</filename></entry>
</row>
<row>
<entry><command>Solaris</command></entry>
<entry><filename>/dev/rdsk/c?t?d?s?</filename></entry>
<entry><filename>/dev/rmt/*</filename></entry>
</row>
<row>
<entry><command>Windows</command></entry>
<entry><filename>/dev/scsi[0-9][0-f]</filename></entry>
<entry><filename>/dev/scsi[0-9][0-f]</filename></entry>
<entry>ASPI adapter:0-9, ID:0-15, <filename>/dev/</filename> optional
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para>
The above list is a simplification of course. In Linux there can be multiple
drive letters followed by a partition number (1 to 15). Smartmontools will
ignore the partition number if it is given and query the underlying device.
In Linux the SCSI tape device name can be "nst" and a letter can be
appended to the device name, both decorations are ignored by smartmontools
as it accesses the underlying tape drive. Also in Linux, SCSI devices can
be accessed via their generic name which is of the form
<filename>/dev/sg[0-9]</filename>.
</para>
<para>
Linux also has an optional Solaris like
naming scheme for SCSI device (scsidev), devfs (mainly used in the lk 2.4
series) and udev (its replacement in the lk 2.6 series). In short, device
naming is a complex area and smartmontools does its best to find
and identify (i.e. whether ATA or SCSI) a device depending on its name. In
some cases smartmontools needs guidance from the user and this can be given
by the '-d ata|scsi|marvell|3ware,N' option in the <command>smartctl</command>
utility and in <command>smartd</command> daemon's configuration file.
</para>
</sect1>

<sect1 id="scsidisk">
      <title>SCSI disks</title>
<para>
What is a SCSI disk? A SCSI disk is a storage device that "talks" the SCSI
command set. An ATA disk is a storage device that "talks" the ATA 
command set. That seems pretty clear. However by the time an operating
system sees the device the situation can be more complicated.
</para>
<para>
The ATA command set is used over native ATA transports which are
parallel ATA (PATA) up to 133 MB/sec and serial ATA (SATA) up to 1.5 Gbps
(approximately 150 MB/sec). In the past
when ATA disks needed to use some other transport (e.g. USB and IEEE1394)
the SCSI command set was sent over the foreign transport. So in this
case the operating system sees a device "talking" the SCSI command set
but the device is really an ATA disk. Many current disk external enclosures
contains ATA disks yet seen from the operating systems view point are
USB mass storage devices talking the SCSI command set.  
</para>
<para>
The SCSI command set is used over various transports: the SCSI Parallel
Interface (SPI), Fibre Channel (FCP), Serial Attached SCSI (SAS),
IEEE1394 (SBP) and USB (mass storage). Many of these transports can
convey multiple command sets (i.e. not just the SCSI command set). The
forthcoming SAS transport is interesting as it can convey both the SCSI
and ATA command sets. There is also the case of a RAID made up of ATA
disks which communicates to host operating system with the SCSI command
set (e.g. 3ware RAID controller).
</para>
<para>
So what does all this mean for smartmontools? In most cases the answer is
not good news. Devices such as USB external disk enclosures translate 
incoming (from the host) SCSI commands to their ATA equivalents and process
responses as required. This translation is limited typically to a small
number of SCSI commands (e.g. READ and WRITE) but <emphasis>not</emphasis>
those commands needed by smartmontools. The author does not know of any 
SCSI_over_USB devices that support Smartmontools. The 3ware RAID (6000, 7000 
and 8000 series Escalade) controllers are supported
on several operating systems with special code.
<footnote><para>
The 3ware RAID solution tunnels the ATA commands needed for
smartmontools (together with a disk number) through a vendor specific 
SCSI command.
</para></footnote>
</para>
</sect1>

<sect1 id="smart">
      <title>SMART</title>
<para>
<acronym>SMART</acronym> never attained the status
of "standard" and its original documents have been withdrawn. Its catchy
name lives on, especially on vendors' web sites and obviously in the
name of this toolset. Luckily the good ideas in <acronym>SMART</acronym>
have been incorporated into the ATA and SCSI standards albeit in
slightly different forms.
</para>
<para>
Initially <acronym>SMART</acronym> began on SCSI disks as vendor
specific extensions. Gradually the <acronym>SMART</acronym> functionality has
moved into the standards (often by other names) and vendors are improving
their standards' compliance. [In the vendors' defence some of the
"standards" are drafts and are yet to be ratified.]
Some SCSI disk vendors have product manuals (available on the net)
that cover the parts of the SCSI command set
that their disk supports. Some of these manuals fill in details that are
left deliberately vague in the the standards.
<footnote><para>
For example: Seagate's "Cheetah 15K.3 Product Manual, Rev F" contains 
sections on <acronym>SMART</acronym>,
thermal monitor, and drive self test (section 5.2.7 to 5.2.9). It also
lists the supported mode pages with their default and changeable values.
</para></footnote>
</para>
<para>
SCSI standards (found at <ulink url="http://www.t10.org">
<literal>www.t10.org</literal></ulink>) only make one footnote
reference to the term <acronym>SMART</acronym>.
Instead the awkward term "Informational Exceptions" is used.
For SCSI tapes the term "TapeAlert" is used.
</para>
</sect1>

<sect1 id="smartctl">
      <title>smartctl command line utility</title>
<para>
The <command>smartctl</command> command line utility gets
<acronym>SMART</acronym> information from the nominated device. In some
cases <acronym>SMART</acronym> information held by the nominated device 
can be modified by the <command>smartctl</command> command. The command 
has many options that can be viewed by the long usage message output be
either of these invocations: <command>smartctl -h</command> or
<command>smartctl --help</command>. Those options that are only
available to ATA disks (i.e. not available to SCSI disks or tape drives)
are marked with "[ATA]". So called "man" page documentation is also
available online.
</para>
<para>
The following options are currently available for SCSI disks and tape
drives unless otherwise noted:
<itemizedlist>
<listitem><para><command>-a | --all</command>: equivalent to the
combination <command>-i -H -A -l error -l selftest</command> options
invoked in that order.
</para></listitem>
<listitem><para><command>-A | --attributes</command>: outputs the
current device temperature, trip temperature and data from the
start-stop log page. Outputs some vendor specific information if
available.
</para></listitem>
<listitem><para><command>-C | --captive</command>: used in conjunction
with <command>-t short</command> or <command>-t long</command> options to
do short or long self tests in the foreground. [Has no effect on tape
drives.]
</para></listitem>
<listitem><para><command>-d TYPE | --device=TYPE</command> where TYPE 
is "ata", "scsi", "marvell" or "3ware,N". Overrides utility's guess
about the class of the device which is based on the form of the nominated
device's name.
</para></listitem>
<listitem><para><command>-h | --help</command>: outputs lengthy usage
message and exits without any other action.
</para></listitem>
<listitem><para><command>-H | --health</command>: outputs single device
health metric determined by the device manufacturer. This will be "OK"
or a failure message. 
</para></listitem>
<listitem><para><command>-i | --info</command>: outputs device 
identification information (derived from a SCSI INQUIRY command) and
whether the device supports <acronym>SMART</acronym> (and temperature 
warnings) and if those facilities are currently enabled.
</para></listitem>
<listitem><para><command>-l TYPE | --log=TYPE</command> where TYPE is
either "selftest" or "error". Outputs either the selftest log or the
error log. 
</para></listitem>
<listitem><para><command>-q TYPE | --quietmode=TYPE</command> where TYPE is
either "silent" or "errorsonly". When the type is silent then nothing is
output to the console but the exit status is set (so it is suitable for
scripts). For "errorsonly" only errors are output to the console. The
exit status is always set. [See the smartctl man page.]
</para></listitem>
<listitem><para><command>-r TYPE | --report=TYPE</command> where TYPE is
either "ioctl[,&lt;n&gt;]" or "scsiioctl[,&lt;n&gt;]". Turns on low level
debugging of issued commands and responses. These commands are issued
through a system command called an "ioctl" in Unix. The debug can be for
all issued commands (i.e. "ioctl") or only SCSI commands ("scsiioctl").
Optionally the TYPE can have a comma and a number post pended to increase
the volume of debug. See this <link linkend="ctldebug">section</link> for
more details.
</para></listitem>
<listitem><para><command>-s VALUE | --smart=VALUE</command> where VALUE is
either "on" or "off". Enables or disables <acronym>SMART</acronym> 
monitoring (and temperature warnings).
</para></listitem>
<listitem><para><command>-S VALUE | --saveauto=VALUE</command> where VALUE
is either "on" or "off". Controls whether the error log values are
preserved across device power cycles.
</para></listitem>
<listitem><para><command>-t TEST | --test=TEST</command> where TEST
is either "offline", "short" or "long". Despite its name "offline" is
a short foreground test that all SCSI devices should support. A "short"
self test is typically 2 minutes or less. A "long" self test will be
considerably longer that 2 minutes, depending on the size of the media.
</para></listitem>
<listitem><para><command>-V | --version</command>: outputs the smartctl
version number (including the cvs version of all its source files)
and build information then exits without any other action.
</para></listitem>
<listitem><para><command>-X | --abort</command>: will terminate a
background short or long self test. Usually the self test log notes
that a self test has been aborted. [Has no effect on tape drives.]
</para></listitem>
</itemizedlist>
</para>
<para>
After the options <command>smartctl</command> expects a device name.
This device name is not required for the '--help' or '--version' options.
If no options are given and a valid device name is given then the copyright
notice is output and the program exits. If the device name is invalid
then that is reported. Only one device name can be given.
</para>
<para>
Examples of various invocations of <command>smartctl</command> on a
SCSI disk follow:
<programlisting>
# smartctl -i /dev/sda
smartctl version 5.31 Copyright (C) 2002-4 Bruce Allen
Home page is http://smartmontools.sourceforge.net/

Device: SEAGATE  ST318451LW       Version: 0003
Serial number: xxxxxxxxxx
Device type: disk
Local Time is: Sat May  1 21:17:14 2004 EST
Device supports SMART and is Enabled
Temperature Warning Enabled
</programlisting>
</para>
<para>
<programlisting>
# smartctl -H /dev/sda
smartctl version 5.31 Copyright (C) 2002-4 Bruce Allen
Home page is http://smartmontools.sourceforge.net/

SMART Health Status: OK
</programlisting>
<programlisting>
# smartctl -A /dev/sda
smartctl version 5.31 Copyright (C) 2002-4 Bruce Allen
Home page is http://smartmontools.sourceforge.net/

Current Drive Temperature:     33 C
Drive Trip Temperature:        65 C
Vendor (Seagate) cache information
  Blocks sent to initiator = 177230717
  Blocks received from initiator = 11929237
  Blocks read from cache and sent to initiator = 28677864
  Number of read and write commands whose size &lt;= segment size = 2454038
  Number of read and write commands whose size &gt; segment size = 1388
Vendor (Seagate) factory information
  number of hours powered up = 107.90
  number of minutes until next internal SMART test = 104
</programlisting>
</para>
</sect1>

<sect1 id="selftest">
      <title>Self Tests</title>
<para>
Rather than wait for thresholds to be triggered, an administrator can
request a self test or program one to happen periodically (e.g. at 3 a.m.
every night or perhaps weekly) with <command>smartd</command>. All SCSI 
disks and tape drives should support a <emphasis>default</emphasis> self
test since it is mandatory. This can
be invoked with the <command>smartctl -t offline &lt;device&gt;</command>
command. Despite the term "offline" this is actually a foreground test
of less than 2 minutes. On completion the default self test yields any 
errors detected and makes no entry into the self test log.
</para>
<para>
The other self tests that are optionally supported by the device are listed
here with the <command>smartctl</command> invocation in brackets:
<itemizedlist>
<listitem><para>
background short [<command>smartctl -t short &lt;device&gt;</command>]
</para></listitem>
<listitem><para>
background extended [<command>smartctl -t long &lt;device&gt;</command>]
</para></listitem>
<listitem><para>
foreground short [<command>smartctl -C -t short &lt;device&gt;</command>]
</para></listitem>
<listitem><para>
foreground extended [<command>smartctl -C -t long &lt;device&gt;</command>]
</para></listitem>
</itemizedlist>
Short self tests should take less than two minutes to complete. The extended
self tests have been known to take more than one hour for disks that are over 
100 GBytes in size. Care should be taken with foreground tests on disks
with mounted file systems as the OS may not take kindly to an hour delay
on a simple READ command.
<footnote><para>
Linux has an additional problem with the foreground extended self tests:
it will attempt to time out the command after 10 seconds. This will appear
in the self test log page as an aborted self test. This problem is fixed
in lk 2.4.22 and the lk 2.6 series (by extending the
timeout to 2 hours). To be on the safe side use the background extended
test instead. Also some disks silently ignore foreground self 
tests (e.g. Seagate Cheetah 15K.1).
</para></footnote>
</para>
<para>
Background self tests can be aborted with the <command>smartctl -X 
&lt;device&gt; </command> command. The self test log will note that an
abort was requested.
</para>
<para>
Self tests other than the default self test cause an entry to be placed
in the self test results log page. The 20 most recent self tests are
held. The self test results can be viewed with the
<command>smartctl -l selftest &lt;device&gt;</command> command. All tests
output the accumulated power on hours when the test was performed and
the success or otherwise (e.g. the self test was aborted by the user's
request) of the test. Unsuccessful self tests output a self test segment 
number (vendor specific), the logical block address of the first failure
(if appropriate) and a sense_key,asc,ascq triple (see appendix). Following
the self test result table is the expected duration of an uninterrupted 
extended self test (when that figure is provided by the device). 
</para>
<para>
Here is an example of a self test log:
<programlisting>
# smartctl -l selftest /dev/sda
smartctl version 5.31 Copyright (C) 2002-4 Bruce Allen
Home page is http://smartmontools.sourceforge.net/

SMART Self-test log
Num  Test              Status         segment  LifeTime  LBA_first_err [SK ASC ASQ]
     Description                      number   (hours)
# 1  Background short  Completed           -    30                   - [-   -    -]
# 2  Background long   Completed           -    18                   - [-   -    -]
# 3  Background long   Completed           -    11                   - [-   -    -]
# 4  Background long   Completed           -    11                   - [-   -    -]
# 5  Background short  Completed           -    11                   - [-   -    -]
# 6  Background short  Completed           -    10                   - [-   -    -]
# 7  Background short  Completed           -     6                   - [-   -    -]
# 8  Background long   Completed           -     6                   - [-   -    -]
# 9  Background short  Completed           -     6                   - [-   -    -]
#10  Background short  Completed           -     5                   - [-   -    -]
#11  Background long   Completed           -     3                   - [-   -    -]
#12  Background short  Completed           -     3                   - [-   -    -]
#13  Background short  Completed           -     2                   - [-   -    -]
#14  Background short  Completed           -     0                   - [-   -    -]
#15  Background short  Completed           -     0                   - [-   -    -]
#16  Background short  Completed           -     0                   - [-   -    -]
#17  Background short  Completed           -     0                   - [-   -    -]
#18  Background short  Completed           -     0                   - [-   -    -]
#19  Background short  Completed           -     0                   - [-   -    -]

Long (extended) Self Test duration: 587 seconds [9.8 minutes]
</programlisting>
</para>
</sect1>

<sect1 id="errorlog">
      <title>Error Logs</title>
<para>
The <command>smartctl -l error &lt;device&gt;</command> command displays
the error counters maintained in the device's log pages. Here is an
example of an error log:
<programlisting>
# smartctl -l error /dev/sda
smartctl version 5.34 Copyright (C) 2002-4 Bruce Allen
Home page is http://smartmontools.sourceforge.net/

Error counter log:
           Errors Corrected by           Total   Correction     Gigabytes    Total
               ECC          rereads/    errors   algorithm      processed    uncorrected
           fast | delayed   rewrites  corrected  invocations   [10^9 bytes]  errors
read:       2213        0         0      2213       2213        257.214           0
write:         0        0         0         0          0         29.212           0
verify:        0        0         0         0          0          0.010           0

Non-medium error count:        0

Error Events logging not supported
</programlisting>
The displayed error logs (if available) are displayed on separate lines:
<itemizedlist>
<listitem><para>
write error counters
</para></listitem>
<listitem><para>
read error counters
</para></listitem>
<listitem><para>
verify error counters (only displayed if non-zero)
</para></listitem>
<listitem><para>
non-medium error counter (only a single number displayed). This represents
the number of recoverable events other than write, read or verify errors.
</para></listitem>
<listitem><para>
error events are held in the "Last n error events" log page. The number
of error event records held (i.e. "n") is vendor specific (e.g. up to 23
records are held for Hitachi 10K300 model disks). The contents of each
error event record is in ASCII and vendor specific. The parameter code
associated with each error event record indicates the relative time at
which the error event occurred. A higher parameter code indicates that the
error event occurred later in time.
If this log page is not supported by the device then "Error Events logging
not supported" is output. If this log page is supported and there are
error event records then each one is prefixed by "Error event &lt;n&gt;:"
where &lt;n&gt; is the parameter code.
</para></listitem>
</itemizedlist>
Each of the write, read and verify error counter logs has various
parameters codes. They are itemized below with the smartctl column
name followed, in brackets, with SCSI standard's description and
parameter code). A description taken from Seagate's SCSI manual (publication
77738479, Rev J) is then given.
<itemizedlist>
<listitem><para>
Errors Corrected by ECC, fast [Errors corrected without substantial delay:
00h]. An error correction was applied to get perfect data (a.k.a. ECC
on-the-fly). "Without substantial delay" means the correction did not
postpone reading of later sectors (e.g. a revolution was lost). The counter
is incremented once for each logical block that requies correction. Two
different blocks corrected during the same command are counted as two events.
</para></listitem>
<listitem><para>
Errors Corrected by ECC: delayed [Errors corrected with possible delays: 01h].
An error code or algorithm (e.g. ECC, checksum) is applied in order to
get perfect data with substantial delay. "With possible delay" means the
correction took longer than a sector time so that reading/writing of
subsequent sectors was delayed (e.g. a lost revolution). The counter is
incremented once for each logical block that requires correction. A
block with a double error that is correctable counts as one event and
two different blocks corrected during the same command count as two
events.
</para></listitem>
<listitem><para>
Error corrected by rereads/rewrites [Total (e.g. rewrites and rereads): 02h].
This parameter code specifies the counter counting the number of errors
that are corrected by applying retries. This counts errors recovered,
not the number of retries. If five retries were required to recover one
block of data, the counter increments by one, not five. The counter is
incremented once for each logical block that is recovered using retries.
If an error is not recoverable while applying retries and is recovered
by ECC, it isn't counted by this counter; it will be counted by the
counter specified by parameter code 01h - Errors Corrected With Possible
Delays.
</para></listitem>
<listitem><para>
Total errors corrected [Total errors corrected: 03h].
This counter counts the total of parameter code errors 00h, 01h and
02h (i.e. error corrected by ECC: fast and delayed plus errors corrected
by rereads and rewrites). There is no "double counting" of data errors
among these three counters. The sum of all correctable errors can be
reached by adding parameter code 01h and 02h errors, not by using this
total. [The author does not understand the previous sentence from the
Seagate manual.]
</para></listitem>
<listitem><para>
Correction algorithm invocations [Total times correction algorithm
processed: 04h]. This parameter code specifies the counter that counts
the total numer of retries, or "times the retry algorithm is invoked".
If after five attempts a counter 02h type error is recovered, then five
is added to this counter. If three retries are required to get stable
ECC syndrome before a counter 01h type error is corrected, then those
three retries are also counted here. The number of retries applied to
unsuccessfully recover an error (counter 06h type error) are also
counted by this counter.
</para></listitem>
<listitem><para>
Gigabytes processed {10^9} [Total bytes processed: 05h]. This parameter
code specifies the counter that counts the total number of bytes either
successfully or unsuccessfully read, written or verified (depending
on the log page) from the drive. If a transfer terminates early because
of an unrecoverable error, only the logical blocks up to and including
the one with the uncorrected data are counted. [smartmontools divides
this counter by 10^9 before displaying it with three digits to the
right of the decimal point. This makes this 64 bit counter easier to
read.]
</para></listitem>
<listitem><para>
Total uncorrected errors [Total uncorrected errors: 06h]. This parameter
code specifies the counter that contains the total number of blocks for
which an uncorrected data error has occurred.
</para></listitem>
</itemizedlist>
</para>
<para>
The SCSI standard (SPC-3) cautions that the <emphasis>exact</emphasis>
definitions of the error counters is not part of the standard (i.e. they
are vendor specific). As noted the above list contains Seagate's
explanation for its disk products (the last revision of that document
was 1999). Seagate's disk product manuals imply that the disk firmware
collects these counter values and periodically commit them to persistent
storage (disk or non-volatile RAM).
<footnote><para>
This is why some models spring to life after minutes of inactivity and
perform some operation even though there are no external commands
pending.
</para></footnote>
They also imply that their firmware is monitoring these error counters
and if they exceed some threshold (e.g. in a certain time interval)
then the firmware will report a thresholds exceeded.
</para>
</sect1>

<sect1 id="smartd">
      <title>smartd daemon</title>
<para>
<command>smartd</command> is a daemon for monitoring disks (both ATA and
SCSI). It is recommended that tape drives and medium changers are monitored
in a more manual fashion with the <command>smartctl</command> command
as discussed in <xref linkend="tapes"/>.
</para>
<para>
The configuration file for <command>smartd</command>
is called <filename>/etc/smartd.conf</filename> and has a man page (as does
the <command>smartd</command> command). The controlling daemon script
is placed in the normal place for a distribution, typically
<filename>/etc/rc.d/init.d/smartd</filename>.
</para>
<para>
<command>smartd</command> polls the devices it has recognized when it
was started. By default it polls every 30 minutes. It reports any adverse
finding and noteworthy occurrences (e.g. disk drive temperature changes)
to a log file (<filename>/var/log/messages</filename>). <command>smartd
</command> can be configured to take other actions, for example send
email to a system administrator.
</para>
<para>
SCSI disks can be discovered by <command>smartd</command> via a scan of 
device nodes (for linux: <filename>/dev/sda</filename> through to 
<filename>/dev/sdz</filename>) by placing the word "DEVICESCAN" in
<filename>/etc/smartd.conf</filename> file. Alternatively the
"DEVICESCAN" word can be removed (or commented out) and SCSI devices
named explicitly:
<programlisting>
/dev/sda -d scsi
/dev/sdb -d scsi
</programlisting>
The "-d scsi" argument overrides what <command>smartd</command> would
guess as the device class (i.e. "ata", "scsi", "marvell" or "3ware,N"). 
</para>
</sect1>

<sect1 id="tapes">
      <title>TapeAlert</title>
<para>
TapeAlert (or "tape alerts") is closely related to the 
<acronym>SMART</acronym> infrastructure provided for SCSI disks.
TapeAlert is specialized for tape and medium changer devices. An example of
a TapeAlert is an indication that the tape drive heads need to be cleaned.
</para>
<para>
Pending TapeAlert errors can be read from the TapeAlert log page
(using <command>smartctl</command>). This can be done even when 
<acronym>SMART</acronym>
monitoring is disabled (e.g. after <command>smartctl -s off &lt;tape_device
&gt;</command>).  In fact, the best way to use the TapeAlert mechanism is 
to poll the flags (with <command>smartctl</command>) at relevant times when
using the tape, for example:
<itemizedlist>
<listitem><para>
when starting a new job using the tape drive
</para></listitem>
<listitem><para>
after an unrecoverable error
</para></listitem>
<listitem><para>
at the end of using each tape (and before it is unloaded)
</para></listitem>
</itemizedlist>
</para>
<para>
The TapeAlert information is divided into three severity classes:
Critical, Warning, and Information. The critical messages require
urgent user intervention. Both critical and warning errors may lead to
loss of data. Some of the errors are related to the medium and others
to the tape drive itself. This is why the TapeAlert information should be
checked when the tape is in use and not polled periodically (i.e. the 
<command>smartd</command> daemon with its periodic polling is not
particularly useful for TapeAlert mechanism).
</para>
<para>
Different sets of flags are defined for tape drives and media
changers. Most of the flags are optional and the set of flags
supported depends on the device. TapeAlert is being included into the
SCSI-3 standards. Many SCSI-2 drives support TapeAlert but the
implementation may not fully conform to the SCSI-3 draft definition
used by smartmontools.
</para>
<para>
It is important that only one application
(or OS driver) is monitoring tape alerts since reading the TapeAlert log 
page deactivates all flags after they are read. 
<footnote><para>
In a multi initiator environment (e.g. several computers sharing the same
tape jukebox) there should only be one application monitoring tape alerts
per initiator.
</para></footnote>
Currently the Linux SCSI tape drivers (st and osst) do not check the 
TapeAlert log page. In Linux, a medium changer device (i.e. the robot in
a tape jukebox) is accessed via its SCSI generic (sg) device name.
</para>
<para>
Code and information on the TapeAlert mechanism have been provided by 
Kai M&auml;kisara <email>Kai.Makisara at kolumbus dot fi</email>.
</para>
</sect1>

<sect1 id="examples">
      <title>Examples</title>
<para>
Here is some output from the <command>smartctl</command>
command. Mostly it is for the '--all' option.
<itemizedlist>
<listitem><para>
StorageTek LT20 tape 'jukebox': the
<ulink url="examples/bnch_DLT1.html">
<literal>tape reading mechanism</literal></ulink>
and the
<ulink url="examples/bnch_robot.html">
<literal>medium changer</literal></ulink> (robot).
Note the TapeAlert warnings in the medium changer output.
</para></listitem>
<listitem><para>
HP DDS-4 
<ulink url="examples/hp_c5713a_smt_a.html">
<literal>tape</literal></ulink>
drive.
</para></listitem>
<listitem><para>
Generic ATAPI CD-RW
<ulink url="examples/atapi_cdrw_smt_a.html">
<literal>cd writer</literal></ulink> is an example of a device that
does not support <acronym>SMART</acronym>.
</para></listitem>
<listitem><para>
IBM DDRS 39130
<ulink url="examples/ddrs_39130_smt_a.html">
<literal>disk</literal></ulink>
 manufactured in 1998. 
</para></listitem>
<listitem><para>
Fujitsu MAM3184MP 18 GigaByte 
<ulink url="examples/mam3184_smt_a.html">
<literal>disk</literal></ulink> when all is well. Here is the output from
the <command>smartctl -H</command> command after the IEC Test bit has been 
set (with the <command>smartctl -s on -r ioctl,3</command> command) on the
same Fujitsu <ulink url="examples/mam3184_smt_health.html">
<literal>disk</literal></ulink> .
</para></listitem>
<listitem><para>
Fujitsu MAP3735NP 73 GigaByte 
<ulink url="examples/map3735_smt_a.html">
<literal>disk</literal></ulink>
</para></listitem>
<listitem><para>
Quantum ATLAS IV 36 WLS, 36 GigaByte 
<ulink url="examples/ativ_36_smt_a.html">
<literal>disk</literal></ulink>
</para></listitem>
<listitem><para>
Seagate Cheetah ST318451LW 18 GigaByte 
<ulink url="examples/st318451_smt_a.html">
<literal>disk</literal></ulink>. It would seem that the total count of bytes
written is reset every time the disk is power cycled. However the total
count of bytes read seems to accumulate over power cycles.
</para></listitem>
</itemizedlist>

</para>
</sect1>

<sect1 id="raid">
      <title>RAID</title>
<para>
It is unlikely that a hardware RAID controller will directly support 
smartmontools. A SCSI RAID controller is a virtual target device that 
essentially remaps the SCSI commands it receives to the physical disks on its 
internal buses. The physical disks in a "SCSI" RAID could be ATA or sATA
disks, in this case a SCSI bus is used between the host computer and an
external RAID controller since LVD SCSI buses (SPI-2,3 and 4) can run 
up to 25 metres (plus other protocol related issues).
</para>
<para>
Some SCSI RAIDs equipped internally with SCSI disks allow access to the 
physical disks via logical unit numbers (LUNs) greater than 0. The SCSI RAID
controller itself takes a LUN equal to 0. In this case smartmontools could
be applied to the LUNs greater than 0 that refer to physical disks.
</para>
<para>
Some SCSI RAIDs equipped internally ATA disks have a mechanism that
allows ATA commands to be tunnelled to the ATA disks. The 3ware 6000
and 7000 series Escalade controllers are examples. In this case,
special provision has been made in smartmontools (starting with
release 5.1-16) to tunnel the ATA command required through to the
physical disks.  This is done by using the <command>-d 3ware,N</command>
option/Directive. See the <command>smartctl</command> 
and <command>smartd</command> man pages for details.
</para>
</sect1>

<appendix id="Details">
      <title>Details</title>
<sect1 id="stand">
      <title>Standards</title>
<para>
One of the first surprises working with SCSI devices and smartmontools
is that the SCSI standards (found at <ulink url="http://www.t10.org">
<literal>www.t10.org</literal></ulink>)
do <emphasis>not</emphasis> use
the term <acronym>SMART</acronym>. Instead the awkward term "Informational
Exceptions" (IE) is used.
</para>
<para>
The original SCSI standard (over 20 years old now) and the SCSI-2 standard
were monolithic documents. In SCSI-3 and beyond the SCSI standards have
been sub-divided and three categories of interest are the:
<itemizedlist>
<listitem><para>architectural model [SAM-3]</para></listitem>
<listitem><para>command sets [SPC-3, SBC-2, SSC-2, SMC-2, etc]
</para></listitem>
<listitem><para>transports [SPI-4, SBP-2, FCP-3, SAS, etc]</para></listitem>
</itemizedlist>
The architectural model while interesting says nothing specific about
Informational Exceptions or related topics. With respect to the transports
the term <emphasis>SCSI</emphasis> has often been synonymous with one
of the SCSI Parallel Interface transports (e.g. SPI-4 which is often know
as "Ultra320") however this is unhelpful. For the purpose of smartmontools
the SCSI command sets are more interesting. The main reference is the
SCSI Primary Commands (SPC-3) document, specifically these sections:
<itemizedlist>
<listitem><para>self test operations; SEND DIAGNOSTIC command (which is
the mechanism for requesting self tests)
</para></listitem>
<listitem><para>MODE SENSE and MODE SELECT commands (both 6 and 10 byte
variants); Mode parameters [the Informational Exceptions Control (IEC) mode
page and the Control mode page]
</para></listitem>
<listitem><para>LOG SENSE and LOG SELECT commands;
Log parameters [these log pages: Informational exceptions,
read/write/verify error counters, non medium error count, temperature, 
start-stop cycle counter and the self test results]
</para></listitem>
</itemizedlist>
The SCSI Block Commands (SBC-2) document covers random access storage
devices such as disks (but excluding CD/DVD readers and writers which are
covered by MMC-3) while the SCSI Streaming Commands (SSC-2) document covers 
tape systems.  The SBC-2 standard does not contain any additional 
information (compared with SPC-3) about Informational Exceptions. 
The SSC-2 standard covers TapeAlert (section 4.2.15), some extra facilities in
the IEC mode page (see the mode parameters section) and some additional
log pages. Medium changers, typically the "robots" in jukebox tape systems,
often support the TapeAlert mechanism and are described in the SMC-2 standard. 
</para>
</sect1>

<sect1 id="infoexc">
      <title>Informational Exceptions</title>
<para>
So what are Informational Exceptions in the SCSI context? They are a
set of vendor specific parameters that the device firmware monitors and 
if a "failure prediction threshold" is exceeded then an exception is
reported. A user is also able to set thresholds on error counters and
have an exception reported if a condition is met. Additionally most
modern disks monitor their temperature and will issue a warning if
a temperature threshold is exceeded.
</para>
<para>
The "failure prediction threshold" exception reporting and the temperature
warning are separately controlled (in byte 2 of the Informational Exceptions
Control (IEC) mode page).
<footnote><para>
Henceforth the term <emphasis>Informational Exceptions</emphasis>
(or IE) will include both Informational Exceptions and the
temperature (or "enclosure degraded") warnings.
</para></footnote>
In smartmontools the
<command>smartctl -s on &lt;device&gt;</command> command turns on IE.
There are various reasons why this may not (fully) work (e.g. IEC mode
page not available or not changeable) so this command queries the device
again after it has attempted the change and reports the state.
The <command>smartctl -s off &lt;device&gt;</command> command turns off
IE reporting.
<footnote><para>
IE have a (minor) performance impact on a disk. There are various other
settings in the IEC mode page (e.g. PERF, EBF and LOGERR) that address
this. The standard gives a lot of latitude to the vendor in implementing
these additional flags. This finer level of control may be added to 
smartmontools if the need arises.
</para></footnote>
</para>
<sect2 id="iereport">
      <title>IE reporting</title>
<para>
Informational Exceptions are reported via the standard SCSI status
reporting mechanism of an additional sense code (asc) and an additional
sense code qualifier (ascq) pair. A selection of these pairs and the 
associated message (there is full list in the SPC-3 document) is listed 
here:
<programlisting>
asc    ascq   message
-------------------------------------------------------
0xb    0x1    Warning - specified temperature exceeded
0x5d   0x0    Failure prediction threshold exceeded
0x5d   0x2    Media failure prediction threshold exceeded
0x5d   0x10   Hardware impending failure general hard drive failure
0x5d   0x11   Hardware impending failure drive error rate too high
0x5d   0x56   Spindle impending failure start unit times too high
0x5d   0xff   Failure prediction threshold exceeded (false)
</programlisting>
The last entry in the above table results from setting the TEST bit and
is for exercising the reporting mechanism rather than the indication
of an actual error.
See this <link linkend="testbit">footnote</link> for more information.
</para>
<para>
One difficulty is that the device firmware may detect these conditions
independently of any command executing. Even if it detects an informational
exception during a command it needs to be careful sending IE error
notifications back with a command especially if that command succeeded
(Linux will not handle this too well in the 2.4 kernel series). 
There is asynchronous event notification (AEN) in SCSI but it is not
reliably supported across all transports. So smartmontools relies
on a poll from the <command>smartd</command> daemon (the default
is every 30 minutes) to detect informational exceptions.
</para>
<para>
The additional sense code and its qualifier are part of what is termed as
the <emphasis>sense buffer</emphasis> which is the response to a 
REQUEST SENSE command. The sense key is also found in the sense buffer.
Synchronous SCSI commands that fail return a single byte status code of
CHECK CONDITION. An OS kernel would see this error/warning status and
then check the sense buffer (by doing a REQUEST SENSE or by other means)
and decide how to continue. From smartmontools's point of view, its
<command>smartd</command> daemon would like to process Informational 
Exceptions without interference from the OS. This is done by setting up
the IEC mode page's MRIE field set to 6. This instructs the SCSI 
device to hold a pending exception until an unsolicited REQUEST SENSE is 
sent. If an exception is pending then the sense key will be "NO SENSE"
and the asc, ascq pair will be set accordingly. In the case of no pending
exception the asc,ascq pair will both be zero. The pending exception is 
also visible in the IE log page, if that is supported. So 
<command>smartd</command> can check the device during its normal polling 
cycle.
</para>
<para>
Pending informational exceptions can also be checked by running
<command>smartctl -H &lt;device&gt;</command>. A message of
"SMART Health Status: OK" indicates that there is no pending IE.
<footnote><para>
<anchor id="testbit"/>
One might worry whether the <command>smartd</command> daemon is properly set
up or if the device really will issue IE when the need arises. The mechanism
can be tested by setting the TEST bit in the IEC mode page. That is
done by this command: <command>smartctl -r ioctl,3 -s on &lt;device&gt;
</command> [ignore the extra debugging output that "-r ioctl,3" causes]. A
special asc/ascq pair is reserved for testing (0x5d,0xff)
and the standard associates with it this awkward message: "Failure prediction 
threshold exceeded (false)". A call to 
<command>smartctl -H &lt;device&gt;</command> or waiting until the next 
<command>smartd</command> poll should produce that message if the mechanism 
is working. The IEC mode page TEST bit can be turned off (i.e. back to normal
IE) with <command>smartctl -s on &lt;device&gt;</command>. The output
after the TEST bit has been activated is shown in the 
Examples section for the Fujitsu MAM3184 disk.
</para></footnote>
</para>
</sect2>
</sect1>

<sect1 id="ctldebug">
      <title>smartctl debug</title>
<para>
Debug information for <command>smartctl</command> is output when 
the <command>-r ioctl</command> or the <command>-r scsiioctl</command>
option is used.  More debug is output when the <command>-r ioctl,&lt;n&gt;
</command> form is used (where "n" is a number greater or equal to 1). Both 
<command>-r ioctl</command> and <command>r scsiioctl,1</command> select
the same amount of SCSI debug information. The debug levels currently 
defined are:
<itemizedlist>
<listitem><para>
1 - output SCSI commands sent to the device and the status received from
the device
</para></listitem>
<listitem><para>
2 - additionally, output the first 64 bytes of data sent to or received from
the device
</para></listitem>
<listitem><para>
3 - additionally, set the IEC mode page TEST bit if accompanying the '-s on'
option
</para></listitem>
</itemizedlist>
See this <link linkend="testbit">footnote</link> for more information about the
use of the IEC mode page TEST bit.
</para>
<para>
One shortcoming of the Informational Exception data provided by
SCSI devices (at least as defined in the current standard) is that
no LOG SENSE page tells the user how many hours the device has been
in use for. The device needs to track its "age" for applying timestamps
to self test results (seen in the "Lifetime (hours)" column of the
<command>smartctl -l selftest</command> command) if they are supported.
So one way to circumvent this shortcoming is to do dummy self 
tests. Hence do a <command>smartctl -t short</command> command and then
wait 2 minutes to see the result in the self test log in which the most
recent self test row (i.e. the first) will have the current lifetime of
the device.
</para>
</sect1>

<sect1 id="links">
      <title>Links</title>
<para>
Here are some links to related projects and packages:
<itemizedlist>
<listitem><para>
<anchor id="t10"/>
primary reference site for SCSI architecture, command sets and transports
<ulink url="http://www.t10.org">
<literal>www.t10.org</literal></ulink>.
<footnote><para>
The documents found on the t10 site are actually <emphasis>draft</emphasis>
standards. Once they are ratified they become available from ANSI for
a fee. The t10 site maintains the last draft prior to ratification and
the most recent draft of yet to be ratified standards.
</para></footnote>
</para></listitem>
<listitem><para>
<anchor id="scsirastools"/>
SCSI raid monitoring tools plus a firmware update utility and other low level
tools <ulink url="http://scsirastools.sourceforge.net">
<literal>scsirastools.sourceforge.net</literal></ulink> .
</para></listitem>
<listitem><para>
<anchor id="sg3utils"/>
A package of SCSI low level tools for Linux called sg3_utils can be found
on this page <ulink url="http://www.torque.net/sg">
<literal>www.torque.net/sg</literal></ulink> (the most recent version
is sg3_utils-1.06). Allows command level access to SCSI devices.
</para></listitem>
<listitem><para>
<anchor id="howto"/>
There is a HOWTO on the Linux SCSI subsystem in the 2.4 series here:
<ulink url="http://www.tldp.org/HOWTO/SCSI-2.4-HOWTO">
<literal>www.tldp.org/HOWTO/SCSI-2.4-HOWTO</literal></ulink>.
</para></listitem>
</itemizedlist>
</para>

<para>
CVS $Id: smartmontools_scsi.xml,v 1.10 2004/09/24 06:57:11 dpgilbert Exp $
</para>
</sect1>
</appendix>

</article>

